//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GenCode.DroneDown.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBeacon")]
    public interface IBeacon {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBeacon/CheckLatestVersion", ReplyAction="http://tempuri.org/IBeacon/CheckLatestVersionResponse")]
        System.IAsyncResult BeginCheckLatestVersion(string version, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckLatestVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBeacon/Emulate", ReplyAction="http://tempuri.org/IBeacon/EmulateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<GenCode.BeaconDevices.BeaconData>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(GenCode.BeaconDevices.BeaconData))]
        System.IAsyncResult BeginEmulate(object manufacturer, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<GenCode.BeaconDevices.BeaconData> EndEmulate(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBeaconChannel : GenCode.DroneDown.ServiceReference1.IBeacon, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckLatestVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckLatestVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmulateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EmulateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<GenCode.BeaconDevices.BeaconData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<GenCode.BeaconDevices.BeaconData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BeaconClient : System.ServiceModel.ClientBase<GenCode.DroneDown.ServiceReference1.IBeacon>, GenCode.DroneDown.ServiceReference1.IBeacon {
        
        private BeginOperationDelegate onBeginCheckLatestVersionDelegate;
        
        private EndOperationDelegate onEndCheckLatestVersionDelegate;
        
        private System.Threading.SendOrPostCallback onCheckLatestVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginEmulateDelegate;
        
        private EndOperationDelegate onEndEmulateDelegate;
        
        private System.Threading.SendOrPostCallback onEmulateCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public BeaconClient() : 
                base(BeaconClient.GetDefaultBinding(), BeaconClient.GetDefaultEndpointAddress()) {
        }
        
        public BeaconClient(EndpointConfiguration endpointConfiguration) : 
                base(BeaconClient.GetBindingForEndpoint(endpointConfiguration), BeaconClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public BeaconClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BeaconClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public BeaconClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BeaconClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public BeaconClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CheckLatestVersionCompletedEventArgs> CheckLatestVersionCompleted;
        
        public event System.EventHandler<EmulateCompletedEventArgs> EmulateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GenCode.DroneDown.ServiceReference1.IBeacon.BeginCheckLatestVersion(string version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckLatestVersion(version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GenCode.DroneDown.ServiceReference1.IBeacon.EndCheckLatestVersion(System.IAsyncResult result) {
            return base.Channel.EndCheckLatestVersion(result);
        }
        
        private System.IAsyncResult OnBeginCheckLatestVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string version = ((string)(inValues[0]));
            return ((GenCode.DroneDown.ServiceReference1.IBeacon)(this)).BeginCheckLatestVersion(version, callback, asyncState);
        }
        
        private object[] OnEndCheckLatestVersion(System.IAsyncResult result) {
            bool retVal = ((GenCode.DroneDown.ServiceReference1.IBeacon)(this)).EndCheckLatestVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckLatestVersionCompleted(object state) {
            if ((this.CheckLatestVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckLatestVersionCompleted(this, new CheckLatestVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckLatestVersionAsync(string version) {
            this.CheckLatestVersionAsync(version, null);
        }
        
        public void CheckLatestVersionAsync(string version, object userState) {
            if ((this.onBeginCheckLatestVersionDelegate == null)) {
                this.onBeginCheckLatestVersionDelegate = new BeginOperationDelegate(this.OnBeginCheckLatestVersion);
            }
            if ((this.onEndCheckLatestVersionDelegate == null)) {
                this.onEndCheckLatestVersionDelegate = new EndOperationDelegate(this.OnEndCheckLatestVersion);
            }
            if ((this.onCheckLatestVersionCompletedDelegate == null)) {
                this.onCheckLatestVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckLatestVersionCompleted);
            }
            base.InvokeAsync(this.onBeginCheckLatestVersionDelegate, new object[] {
                        version}, this.onEndCheckLatestVersionDelegate, this.onCheckLatestVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GenCode.DroneDown.ServiceReference1.IBeacon.BeginEmulate(object manufacturer, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEmulate(manufacturer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<GenCode.BeaconDevices.BeaconData> GenCode.DroneDown.ServiceReference1.IBeacon.EndEmulate(System.IAsyncResult result) {
            return base.Channel.EndEmulate(result);
        }
        
        private System.IAsyncResult OnBeginEmulate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            object manufacturer = ((object)(inValues[0]));
            return ((GenCode.DroneDown.ServiceReference1.IBeacon)(this)).BeginEmulate(manufacturer, callback, asyncState);
        }
        
        private object[] OnEndEmulate(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<GenCode.BeaconDevices.BeaconData> retVal = ((GenCode.DroneDown.ServiceReference1.IBeacon)(this)).EndEmulate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEmulateCompleted(object state) {
            if ((this.EmulateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EmulateCompleted(this, new EmulateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EmulateAsync(object manufacturer) {
            this.EmulateAsync(manufacturer, null);
        }
        
        public void EmulateAsync(object manufacturer, object userState) {
            if ((this.onBeginEmulateDelegate == null)) {
                this.onBeginEmulateDelegate = new BeginOperationDelegate(this.OnBeginEmulate);
            }
            if ((this.onEndEmulateDelegate == null)) {
                this.onEndEmulateDelegate = new EndOperationDelegate(this.OnEndEmulate);
            }
            if ((this.onEmulateCompletedDelegate == null)) {
                this.onEmulateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEmulateCompleted);
            }
            base.InvokeAsync(this.onBeginEmulateDelegate, new object[] {
                        manufacturer}, this.onEndEmulateDelegate, this.onEmulateCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GenCode.DroneDown.ServiceReference1.IBeacon CreateChannel() {
            return new BeaconClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBeacon)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBeacon)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:50378/Services/Beacon.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return BeaconClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IBeacon);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return BeaconClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IBeacon);
        }
        
        private class BeaconClientChannel : ChannelBase<GenCode.DroneDown.ServiceReference1.IBeacon>, GenCode.DroneDown.ServiceReference1.IBeacon {
            
            public BeaconClientChannel(System.ServiceModel.ClientBase<GenCode.DroneDown.ServiceReference1.IBeacon> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCheckLatestVersion(string version, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = version;
                System.IAsyncResult _result = base.BeginInvoke("CheckLatestVersion", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCheckLatestVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CheckLatestVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEmulate(object manufacturer, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = manufacturer;
                System.IAsyncResult _result = base.BeginInvoke("Emulate", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<GenCode.BeaconDevices.BeaconData> EndEmulate(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<GenCode.BeaconDevices.BeaconData> _result = ((System.Collections.ObjectModel.ObservableCollection<GenCode.BeaconDevices.BeaconData>)(base.EndInvoke("Emulate", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IBeacon,
        }
    }
}
